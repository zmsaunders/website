{"version":3,"sources":["base/_buttons.scss","bourbon/addons/_prefixer.scss","base/_variables.scss","base/_forms.scss","base/_lists.scss","base/_tables.scss","base/_typography.scss","neat/grid/_box-sizing.scss","zmsaunders/core_layout.scss","zmsaunders/vars.scss","neat/grid/_outer-container.scss","neat/settings/_grid.scss","bourbon/addons/_clearfix.scss","neat/grid/_media.scss","zmsaunders/header.scss","zmsaunders/footer.scss","neat/grid/_span-columns.scss","zmsaunders/about.scss"],"names":[],"mappings":"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","file":"main.css","sourcesContent":["#{$all-button-inputs},\nbutton {\n  @include appearance(none);\n  -webkit-font-smoothing: antialiased;\n  background-color: $action-color;\n  border-radius: $base-border-radius;\n  border: none;\n  color: #fff;\n  cursor: pointer;\n  display: inline-block;\n  font-family: $base-font-family;\n  font-size: $base-font-size;\n  font-weight: 600;\n  line-height: 1;\n  padding: 0.75em 1em;\n  text-decoration: none;\n  user-select: none;\n  vertical-align: middle;\n  white-space: nowrap;\n\n  &:hover,\n  &:focus {\n    background-color: darken($action-color, 15%);\n    color: #fff;\n  }\n\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.5;\n  }\n}\n","@charset \"UTF-8\";\n\n/// A mixin for generating vendor prefixes on non-standardized properties.\n///\n/// @param {String} $property\n///   Property to prefix\n///\n/// @param {*} $value\n///   Value to use\n///\n/// @param {List} $prefixes\n///   Prefixes to define\n///\n/// @example scss - Usage\n///   .element {\n///     @include prefixer(border-radius, 10px, webkit ms spec);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     -webkit-border-radius: 10px;\n///     -moz-border-radius: 10px;\n///     border-radius: 10px;\n///   }\n///\n/// @require {variable} $prefix-for-webkit\n/// @require {variable} $prefix-for-mozilla\n/// @require {variable} $prefix-for-microsoft\n/// @require {variable} $prefix-for-opera\n/// @require {variable} $prefix-for-spec\n\n@mixin prefixer($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    } @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    } @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    } @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    } @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    } @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n}\n\n@mixin disable-prefix-for-all() {\n  $prefix-for-webkit:    false !global;\n  $prefix-for-mozilla:   false !global;\n  $prefix-for-microsoft: false !global;\n  $prefix-for-opera:     false !global;\n  $prefix-for-spec:      false !global;\n}\n","// Typography\n$base-font-family: $helvetica;\n$heading-font-family: $base-font-family;\n\n// Font Sizes\n$base-font-size: 1em;\n\n// Line height\n$base-line-height: 1.5;\n$heading-line-height: 1.2;\n\n// Other Sizes\n$base-border-radius: 3px;\n$base-spacing: $base-line-height * 1em;\n$small-spacing: $base-spacing / 2;\n$base-z-index: 0;\n\n// Colors\n$blue: #477dca;\n$dark-gray: #333;\n$medium-gray: #999;\n$light-gray: #ddd;\n\n// Font Colors\n$base-background-color: #fff;\n$base-font-color: $dark-gray;\n$action-color: $blue;\n\n// Border\n$base-border-color: $light-gray;\n$base-border: 1px solid $base-border-color;\n\n// Forms\n$form-box-shadow: inset 0 1px 3px rgba(#000, 0.06);\n$form-box-shadow-focus: $form-box-shadow, 0 0 5px adjust-color($action-color, $lightness: -5%, $alpha: -0.3);\n","fieldset {\n  background-color: lighten($base-border-color, 10%);\n  border: $base-border;\n  margin: 0 0 $small-spacing;\n  padding: $base-spacing;\n}\n\ninput,\nlabel,\nselect {\n  display: block;\n  font-family: $base-font-family;\n  font-size: $base-font-size;\n}\n\nlabel {\n  font-weight: 600;\n  margin-bottom: $small-spacing / 2;\n\n  &.required::after {\n    content: \"*\";\n  }\n\n  abbr {\n    display: none;\n  }\n}\n\n#{$all-text-inputs},\nselect[multiple=multiple],\ntextarea {\n  background-color: $base-background-color;\n  border: $base-border;\n  border-radius: $base-border-radius;\n  box-shadow: $form-box-shadow;\n  box-sizing: border-box;\n  font-family: $base-font-family;\n  font-size: $base-font-size;\n  margin-bottom: $base-spacing / 2;\n  padding: $base-spacing / 3;\n  transition: border-color;\n  width: 100%;\n\n  &:hover {\n    border-color: darken($base-border-color, 10%);\n  }\n\n  &:focus {\n    border-color: $action-color;\n    box-shadow: $form-box-shadow-focus;\n    outline: none;\n  }\n}\n\ntextarea {\n  resize: vertical;\n}\n\ninput[type=\"search\"] {\n  @include appearance(none);\n}\n\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  display: inline;\n  margin-right: $small-spacing / 2;\n}\n\ninput[type=\"file\"] {\n  padding-bottom: $small-spacing;\n  width: 100%;\n}\n\nselect {\n  margin-bottom: $base-spacing;\n  max-width: 100%;\n  width: auto;\n}\n","ul,\nol {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n\n  &%default-ul {\n    list-style-type: disc;\n    margin-bottom: $small-spacing;\n    padding-left: $base-spacing;\n  }\n\n  &%default-ol {\n    list-style-type: decimal;\n    margin-bottom: $small-spacing;\n    padding-left: $base-spacing;\n  }\n}\n\ndl {\n  margin-bottom: $small-spacing;\n\n  dt {\n    font-weight: bold;\n    margin-top: $small-spacing;\n  }\n\n  dd {\n    margin: 0;\n  }\n}\n","table {\n  @include font-feature-settings(\"kern\", \"liga\", \"tnum\");\n  border-collapse: collapse;\n  margin: $small-spacing 0;\n  table-layout: fixed;\n  width: 100%;\n}\n\nth {\n  border-bottom: 1px solid darken($base-border-color, 15%);\n  font-weight: 600;\n  padding: $small-spacing 0;\n  text-align: left;\n}\n\ntd {\n  border-bottom: $base-border;\n  padding: $small-spacing 0;\n}\n\ntr,\ntd,\nth {\n  vertical-align: middle;\n}\n","body {\n  @include font-feature-settings(\"kern\", \"liga\", \"pnum\");\n  -webkit-font-smoothing: antialiased;\n  color: $base-font-color;\n  font-family: $base-font-family;\n  font-size: $base-font-size;\n  line-height: $base-line-height;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: $heading-font-family;\n  font-size: $base-font-size;\n  line-height: $heading-line-height;\n  margin: 0 0 $small-spacing;\n}\n\np {\n  margin: 0 0 $small-spacing;\n}\n\na {\n  color: $action-color;\n  text-decoration: none;\n  transition: color 0.1s linear;\n\n  &:active,\n  &:focus,\n  &:hover {\n    color: darken($action-color, 15%);\n  }\n\n  &:active,\n  &:focus {\n    outline: none;\n  }\n}\n\nhr {\n  border-bottom: $base-border;\n  border-left: none;\n  border-right: none;\n  border-top: none;\n  margin: $base-spacing 0;\n}\n\nimg,\npicture {\n  margin: 0;\n  max-width: 100%;\n}\n","@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    @include box-sizing(border-box);\n  }\n\n  * {\n    &,\n    &:before,\n    &:after {\n      @include box-sizing(inherit);\n    }\n  }\n}\n","body {\n    background: $c1;\n    margin: 0;\n    padding: 0;\n    font-family: 'Roboto', Arial, Sans-Serif;\n}\n\n.container {\n    @include outer-container;\n    padding: 2em inherit;\n    @include media($max-width) {\n        padding: 0 inherit;\n    }\n}","$c1 : #EFEFEF;\n$c2 : #BDD4DE;\n$c3 : #3F5765;\n$c4 : #2B3A42;\n$c5 : #FF530D;","@charset \"UTF-8\";\n\n/// Makes an element a outer container by centring it in the viewport, clearing its floats, and setting its `max-width`.\n/// Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.\n///\n/// @param {Number (unit)} $local-max-width ($max-width)\n///   Max width to be applied to the element. Can be a percentage or a measure.\n///\n/// @example scss - Usage\n///   .element {\n///     @include outer-container(100%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     *zoom: 1;\n///     max-width: 100%;\n///     margin-left: auto;\n///     margin-right: auto;\n///   }\n///\n///   .element:before, .element:after {\n///     content: \" \";\n///     display: table;\n///   }\n///\n///   .element:after {\n///     clear: both;\n///   }\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Sets the relative width of a single grid column. The unit used should be the same one used to define `$gutter`. To learn more about golden-ratio() see [Bourbon docs](http://bourbon.io/docs/#golden-ratio). Set with a `!global` flag.\n///\n/// @type Number (Unit)\n\n$column: golden-ratio(1em, 3) !default;\n\n/// Sets the relative width of a single grid gutter. The unit used should be the same one used to define `$column`. To learn more about golden-ratio() see [Bourbon docs](http://bourbon.io/docs/#golden-ratio). Set with the `!global` flag.\n///\n/// @type Number (Unit)\n\n$gutter: golden-ratio(1em, 1) !default;\n\n/// Sets the total number of columns in the grid. Its value can be overridden inside a media query using the `media()` mixin. Set with the `!global` flag.\n///\n/// @type Number (Unitless)\n\n$grid-columns: 12 !default;\n\n/// Sets the max-width property of the element that includes `outer-container()`. To learn more about `em()` see [Bourbon docs](http://bourbon.io/docs/#px-to-em). Set with the `!global` flag.\n///\n/// @type Number (Unit)\n///\n$max-width: em(1088) !default;\n\n/// When set to true, it sets the box-sizing property of all elements to `border-box`. Set with a `!global` flag.\n///\n/// @type Bool\n///\n/// @example css - CSS Output\n///   html {\n///     -webkit-box-sizing: border-box;\n///     -moz-box-sizing: border-box;\n///     box-sizing: border-box; }\n///\n///   *, *:before, *:after {\n///     -webkit-box-sizing: inherit;\n///     -moz-box-sizing: inherit;\n///     box-sizing: inherit;\n///   }\n\n$border-box-sizing: true !default;\n\n/// Sets the default [media feature](http://www.w3.org/TR/css3-mediaqueries/#media) that `media()` and `new-breakpoint()` revert to when only a breakpoint value is passed. Set with a `!global` flag.\n///\n/// @type String\n\n$default-feature: min-width; // Default @media feature for the breakpoint() mixin\n\n///Sets the default layout direction of the grid. Can be `LTR` or `RTL`. Set with a `!global` flag.\n///\n///@type String\n\n$default-layout-direction: LTR !default;\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n///\n/// @example scss - Usage\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css - CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Outputs a media-query block with an optional grid context (the total number of columns used in the grid).\n///\n/// @param {List} $query\n///   A list of media query features and values, where each `$feature` should have a corresponding `$value`.\n///   For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).\n///\n///   If there is only a single `$value` in `$query`, `$default-feature` is going to be used.\n///\n///   The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`).\n///\n///\n/// @param {Number (unitless)} $total-columns ($grid-columns)\n///   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.\n///\n/// @example scss - Usage\n///   .responsive-element {\n///      @include media(769px) {\n///        @include span-columns(6);\n///      }\n///   }\n///\n///  .new-context-element {\n///    @include media(min-width 320px max-width 480px, 6) {\n///      @include span-columns(6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///  @media screen and (min-width: 769px) {\n///    .responsive-element {\n///      display: block;\n///      float: left;\n///      margin-right: 2.35765%;\n///      width: 48.82117%;\n///    }\n///\n///    .responsive-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n///\n///  @media screen and (min-width: 320px) and (max-width: 480px) {\n///    .new-context-element {\n///      display: block;\n///      float: left;\n///      margin-right: 4.82916%;\n///      width: 100%;\n///    }\n///\n///    .new-context-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n\n@mixin media($query: $feature $value $columns, $total-columns: $grid-columns) {\n  @if length($query) == 1 {\n    @media screen and ($default-feature: nth($query, 1)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: $total-columns !global;\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  } @else {\n    $loop-to: length($query);\n    $media-query: \"screen and \";\n    $default-grid-columns: $grid-columns;\n    $grid-columns: $total-columns !global;\n\n    @if is-not(is-even(length($query))) {\n      $grid-columns: nth($query, $loop-to) !global;\n      $loop-to: $loop-to - 1;\n    }\n\n    $i: 1;\n    @while $i <= $loop-to {\n      $media-query: $media-query + \"(\" + nth($query, $i) + \": \" + nth($query, $i + 1) + \") \";\n\n      @if ($i + 1) != $loop-to {\n        $media-query: $media-query + \"and \";\n      }\n\n      $i: $i + 2;\n    }\n\n    @media #{$media-query} {\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  }\n}\n","header {\n    background: $c4;\n    padding: 2em inherit;\n\n    .me {\n        position: relative;\n        float: left;\n\n        .img {\n            float: left;\n            background: url('/assets/images/face.png') top left no-repeat;\n            background-size: cover;\n            width: 4em;\n            height: 4em;\n            border-radius: 50px;\n            text-indent: -999em;\n            @include transition(all .5s);\n\n            @include media(450px) {\n                width: 6em;\n                height: 6em;\n            }\n        }\n\n        h1, h2 {\n            font-size: 1.5em;\n            font-weight: 300;\n            text-indent: 0;\n            color: $c1;\n            display: block;\n            margin-left: 80px;\n\n            @include media(450px) {\n                margin-left: 120px;\n                font-size: 2em;\n                width: 400px;\n            }\n        }\n\n        h1 {\n            margin-top: 10px;\n        }\n        h2 {\n            font-weight: 300;\n            color: $c2;\n            font-size: 1.2em;\n        }\n\n        &:hover {\n\n            .img {\n                border-radius: 20px;\n            }\n        }\n    }\n\n    ul {\n        @include media(450px) {\n            float: right;\n            li {\n                float: left;\n            }\n        }\n\n        a {\n            display: inline-block;\n            padding: .75em 2em;\n            margin: 1.25em .75em;\n            text-transform: uppercase;\n            border-radius: 1em;\n            font-weight: 500;\n            color: $c1;\n\n            @include transition(all .2s);\n            &:hover {\n                background: $c2;\n            }\n        }\n    }\n}","footer {\n    background: $c2;\n    color: $c3;\n    padding: 3em;\n\n    p {\n        @include outer-container;\n    }\n\n    .copyright {\n        @include span-columns(10);\n    }\n\n    .build-status {\n        @include span-columns(2);\n    }\n}","@charset \"UTF-8\";\n\n/// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.\n///\n/// @param {List} $span\n///   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).\n///\n///   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.\n///\n///   The values can be separated with any string such as `of`, `/`, etc.\n///\n/// @param {String} $display (block)\n///   Sets the display property of the element. By default it sets the display propert of the element to `block`.\n///\n///   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n///\n///   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.\n///\n/// @example scss - Usage\n///   .element {\n///     @include span-columns(6);\n///\n///    .nested-element {\n///      @include span-columns(2 of 6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: block;\n///     float: left;\n///     margin-right: 2.35765%;\n///     width: 48.82117%;\n///   }\n///\n///   .element:last-child {\n///     margin-right: 0;\n///   }\n///\n///   .element .nested-element {\n///     display: block;\n///     float: left;\n///     margin-right: 4.82916%;\n///     width: 30.11389%;\n///   }\n///\n///   .element .nested-element:last-child {\n///     margin-right: 0;\n///   }\n\n@mixin span-columns($span: $columns of $container-columns, $display: block) {\n  $columns: nth($span, 1);\n  $container-columns: container-span($span);\n\n  $parent-columns: get-parent-columns($container-columns) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  $display-table: is-display-table($container-display-table, $display);\n\n  @if $display-table  {\n    display: table-cell;\n    width: percentage($columns / $container-columns);\n  } @else {\n    float: #{$opposite-direction};\n\n    @if $display != no-display {\n      display: block;\n    }\n\n    @if $display == collapse {\n      @include -neat-warn(\"The 'collapse' argument will be deprecated. Use 'block-collapse' instead.\");\n    }\n\n    @if $display == collapse or $display == block-collapse {\n      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);\n\n      &:last-child {\n        width: flex-grid($columns, $container-columns);\n      }\n\n    } @else {\n      margin-#{$direction}: flex-gutter($container-columns);\n      width: flex-grid($columns, $container-columns);\n\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n  }\n}\n",".about {\n    .hero {\n        text-align: center;\n        font-weight: 800;\n        color: $c1;\n        text-shadow: 2px 2px 2px rgba(0,0,0,0.8);\n        font-size: 3em;\n        background: #333 url('/assets/images/comp.jpg') center center no-repeat;\n        background-size: cover;\n\n        @include media(600px) {\n            padding: 2em;\n            font-size: 5em;\n        }\n\n        span {\n            background: rgba(0,0,0,0.6);\n            display: block;\n            padding: .5em;\n        }\n    }\n\n    .third {\n        @include span-columns(12);\n        padding: 2em;\n\n        @include media(768px) {\n            @include span-columns(4);\n            padding: 2em 0;\n        }\n    }\n\n    h2 {\n        font-weight: 300;\n        padding-bottom: .25em;\n        font-size: 2em;\n    }\n\n    p {\n        font-size: 1.2em;\n        font-weight: 300;\n        padding-bottom: .25em;\n    }\n    img {\n        border-radius: 5px;\n        box-shadow: 2px 2px 2px rgba(0,0,0,0.2);\n    }\n\n    .full {\n        padding: 2em;\n        @include span-columns(12);\n\n        @include media(768px) {\n            padding: 2em 0;\n        }\n    }\n}"],"sourceRoot":"/source/"}